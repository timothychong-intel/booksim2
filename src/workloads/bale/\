
#include "swm_basic.hpp"

#include <random>

void SwmBasic::send_packets(int num_of_packets){
    while(num_of_packets && !gShouldDrain) {
        if (getTime() >= this->last_injection_time + this->send_interval){
            this->last_injection_time = this->last_injection_time + this->send_interval;
            put(this->packet_size, 0);
            num_of_packets --;
        } else {
            set_time(this->last_injection_time + this->send_interval);
        }
    }
}
void SwmBasic::behavior(int argc, char *argv[]){
    lgp.lgp_init(this, _me, _np);
    spmat.init_spmat(&lgp, _me, _np);
    std.init_std_options(&lgp, &spmat, _me, _np);

    this->packet_size = getConfig()->GetInt("packet_size");
    this->work_time = getConfig()->GetInt("swm_work_time");
    cout << "YOYO" << endl;

    if (_np == 2){
        work_time = 0;
    } else if (_np == 3){
        switch(packet_size){
            // n = 3
            case 16: work_time = 0; break;
            case 32: work_time = 65; break;
            case 64: work_time = 131; break;
            case 128: work_time = 262; break;
            case 256: work_time = 522; break;
            default: exit(-1); break;
        }
    } else if (_np == 9){
        switch(packet_size){
            // n = 9
            case 16: work_time = 131; break;
            case 32: work_time = 262; break;
            case 64: work_time = 525; break;
            case 128: work_time = 1048; break;
            case 256: work_time = 2097; break;
            default: exit(-1); break;
        }
    } else {
        cout << "Wrong number of pes" << endl;
        exit(-1);
    }

    cout << "write packet size" << this->packet_size << endl << flush;

    this->last_injection_time = 0;
    put(this->packet_size, 0);
    this->send_interval = this->work_time;
    cout << _me << ":send_interval in main: " << this->send_interval << endl << flush;

    if (_me != 0){
        send_packets(1000);
        cout <<  _me << ": Clearing stats from app" << lgp.getTime() << endl << flush;
        // A little janky, the latest set will win
        if (_me == _np - 1){
            gLastClearStatTime = lgp.getTime();
        }
        //send_packets(10000);
        send_packets(1000);
        if (!gShouldDrain && _me == _np - 1){
            cout << _me <<": drain now" << lgp.getTime() << endl << flush;
            gSimEnabled = false;
            gShouldDrain = true;
        }
        //send_packets(10000);
        send_packets(1000);
    }

    cout <<  _me << ": Ending basic application at " << lgp.getTime() << endl;
}
